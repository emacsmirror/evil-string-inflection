* snakecamelfy

[[https://travis-ci.org/ninrod/snakecamelfy.svg?branch=master][https://travis-ci.org/ninrod/snakecamelfy.svg?branch=master]]
[[https://www.gnu.org/licenses/gpl-3.0.en.html][https://img.shields.io/badge/license-GPLv3-blue.svg]]

[[https://image.slidesharecdn.com/theneverendingrestapidesigndebate-devoxx2015-151121085802-lva1-app6892/95/the-neverending-rest-api-design-debate-18-638.jpg?cb=1448097446][https://image.slidesharecdn.com/theneverendingrestapidesigndebate-devoxx2015-151121085802-lva1-app6892/95/the-neverending-rest-api-design-debate-18-638.jpg?cb=1448097446]]

evil operator to transform CamelCase words into snake_case

# [[https://travis-ci.org/ninrod/exato.svg?branch=master][https://travis-ci.org/ninrod/exato.svg?branch=master]]
# [[https://melpa.org/#/exato][file:https://melpa.org/packages/exato-badge.svg]]

* Installation

place the file in your load-path and write ~(require 'snakecamelfy)~ in your =~/.emacs.d/init.el=.

# Just use [[https://melpa.org][MELPA]]. Here's an oneliner using [[https://github.com/jwiegley/use-package][use-package]]:

# #+BEGIN_SRC emacs-lisp
#   (use-package exato :ensure t)
# #+END_SRC

* Usage

This package provides the =g~= operator to transform CamelCase words into snake_case.
You can customize the binding.

Try using =g~iw=.

* Examples

- cursor is on =[]=

#+BEGIN_SRC text
Camel[C]aseWord
-> g~iW
camel_case_word
-> g~iW
CamelCaseWord

snake_[c]ase_word
-> g~iW
SnakeCaseWord
-> . (this is the dot operator, which repeats last operation)
snake_case_word
#+END_SRC

* Customization

- you can customize =snakecamelfy='s binding as follows:

#+BEGIN_SRC emacs-lisp
  (setq snakecamelfy-key (kbd "zx"))
#+END_SRC
* LICENSE

- [[https://www.gnu.org/licenses/gpl-3.0.en.html][GNU General Public License v3]]
#+BEGIN_SRC text
GNU General Public License v3
Copyright (c) 2017 Filipe Silva (ninrod)
#+END_SRC

